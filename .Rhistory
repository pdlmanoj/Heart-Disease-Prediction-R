cat("Logistic Regression Accuracy:", logistic_accuracy, "\n")
confusion_matrix <- confusionMatrix(factor(logistic_predictions), factor(test_data$target))
# Print confusion matrix
print(confusion_matrix)
sqrt(nrow(train_data))
knn_model <- knn(train = train_data[, -ncol(train_data)], test = test_data[, -ncol(test_data)], cl = train_data$target, k = 15)
# Model accurary
knn_accuracy <- mean(knn_model == test_data$target)
cat("KNN Accuracy:", knn_accuracy, "\n")
confusion_matrix <- confusionMatrix(factor(knn_model), factor(test_data$target))
confusion_matrix
random_forest_model <- randomForest(target ~.,  data = train_data)
rf_predictions <- predict(random_forest_model, newdata = test_data)
# Evaluate model
rf_accuracy <- mean(rf_predictions == test_data$target)
cat("Random Forest Accuracy:", rf_accuracy, "\n")
set.seed(100) # random number generation to 231
train_index<-sample(nrow(df),0.70*nrow(df))
train_data <- df[train_index, ]
test_data <- df[-train_index, ]
logistic_model <- glm(target ~ ., data = train_data, family = "binomial")
summary(logistic_model)
```{r}
logistic_predictions <- predict(logistic_model, newdata = test_data, type = "response")
# Convert predictions to numeric
logistic_predictions <- as.numeric(as.character(logistic_predictions))
# Convert to binary 0 and 1 of predictions
logistic_predictions <- ifelse(logistic_predictions > 0.5, 1, 0)
## Accuracy of Model
logistic_accuracy <- mean(logistic_predictions == test_data$target)
cat("Logistic Regression Accuracy:", logistic_accuracy, "\n")
# Training model
random_forest_model <- randomForest(target ~.,  data = train_data)
rf_predictions <- predict(random_forest_model, newdata = test_data)
# Evaluate model
rf_accuracy <- mean(rf_predictions == test_data$target)
cat("Random Forest Accuracy:", rf_accuracy, "\n")
knn_model <- knn(train = train_data[, -ncol(train_data)], test = test_data[, -ncol(test_data)], cl = train_data$target, k = 15)
# Model accurary
knn_accuracy <- mean(knn_model == test_data$target)
cat("KNN Accuracy:", knn_accuracy, "\n")
confusion_matrix <- confusionMatrix(factor(knn_model), factor(test_data$target))
confusion_matrix
# Training model
random_forest_model <- randomForest(target ~.,  data = train_data)
rf_predictions <- predict(random_forest_model, newdata = test_data)
rf_accuracy <- mean(rf_predictions == test_data$target)
cat("Random Forest Accuracy:", rf_accuracy, "\n")
library(tidyverse)
library(randomForest)
library(class)
library(dplyr)
library(ggplot2)
library(GGally)
library(corrplot)
library(caTools)
library(caret)
library(ggcorrplot)
setwd('/Users/sandip/Documents/Github/Heart-Disease-Prediction-R/')
heart_df <- read.csv("heart.csv")
head(heart_df)
glimpse(heart_df)
is.null(heart_df)
is_duplicate <- duplicated(heart_df)
is_duplicate
sum(is_duplicate)
# which_row_duplicate <- which(duplicated(heart_df))
# which_row_duplicate
df <- heart_df[!is_duplicate, ]
# df
glimpse(df)
# Sex column
df$sex <- as.factor(df$sex)
# cp
df$cp <- as.factor(df$cp)
#fbs
df$fbs <- as.factor(df$fbs)
#restecg
df$restecg <- as.factor(df$restecg)
#exang
df$exang <- as.factor(df$exang)
#slope
df$slope <- as.factor(df$slope)
#ca
df$ca <- as.factor(df$ca)
#thal
df$thal <- as.factor(df$thal)
#target
df$target <- as.factor(df$target)
glimpse(df)
summary(df)
dist_target_column <- table(df$target)
dist_target_column
ggplot(df, aes(x = factor(target))) +
geom_bar() +
labs(title = "Distribution of Target Variable",
x = "Target Column",
y = "Count")
ggplot(df, mapping = aes(x = age, fill = target)) +
geom_histogram() +
facet_wrap(vars(target)) +
labs(title = "Age vs Target", x = "Age", y = "Count", fill = "Target")
ggplot(df, mapping = aes(x=target, fill = cp)) +
geom_bar(position = "dodge") +
labs(title = "cp vs target", x = "Target", y = "Count", fill = "cp type")
ggplot(df, mapping = aes(x = sex, fill = target)) +
geom_bar(position = "fill") +
labs(x = "Sex", y = "Proportion", fill = "Target", title = 'Sex vs Target') +
theme(axis.text.x = element_text(size = 12), axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12), axis.text.y = element_text(size = 12))
# 0 low | 1 high
ggplot(df, mapping = aes(x = fbs, fill = target)) +
geom_bar(position = "fill") +
labs(x = "Fasting blood sugar", y = "Proportion", fill = "Target") +
theme(axis.text.x = element_text(size = 12), axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12), axis.text.y = element_text(size = 12))
# 1 = yes, 0 = no
ggplot(df, mapping = aes(x = exang, fill = target)) +
geom_bar(position = "fill") +
labs(x = "Exercise Induced Angina", y = "Proportion", fill = "Target") +
theme(axis.text.x = element_text(size = 12), axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12), axis.text.y = element_text(size = 12))
ggplot(df, mapping = aes(x = slope, fill = target)) +
geom_bar(position = "fill") +
labs(x = "slope of peak exercise(ST)", y = "Proportion", fill = "Target") +
theme(axis.text.x = element_text(size = 12), axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12), axis.text.y = element_text(size = 12))
ggplot(df, mapping = aes(x = thal, fill = target)) +
geom_bar(position = "fill") +
labs(x = "Thalium Stress Test Result", y = "Proportion", fill = "Target") +
theme(axis.text.x = element_text(size = 12), axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12), axis.text.y = element_text(size = 12))
ggplot(df, mapping = aes(x = target, fill = ca)) +
geom_bar(position = "fill") +
labs(x = "Target", y = "Proportion", fill = "Number of Major Vessels") +
theme(axis.text.x = element_text(size = 12), axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12), axis.text.y = element_text(size = 12))
# Only numeric value correlation
ggcorr(df, label = TRUE,label_size = 3, hjust = 1)
# Convert factor variables back to numeric representation
# df$sex <- as.numeric(df$sex)
# df$cp <- as.numeric(df$cp)
# df$fbs <- as.numeric(df$fbs)
# df$restecg <- as.numeric(df$restecg)
# df$exang <- as.numeric(df$exang)
# df$slope <- as.numeric(df$slope)
# df$ca <- as.numeric(df$ca)
# df$thal <- as.numeric(df$thal)
# df$target <- as.numeric(df$target)
#
#
# cor_matrix <- cor(df, use="complete.obs")
# corrplot(cor_matrix, method="color")
set.seed(100) # random number generation to 231
train_index<-sample(nrow(df),0.70*nrow(df))
train_data <- df[train_index, ]
test_data <- df[-train_index, ]
# Train logistic regression model
logistic_model <- glm(target ~ ., data = train_data, family = "binomial")
summary(logistic_model)
# Evaluate models
logistic_predictions <- predict(logistic_model, newdata = test_data, type = "response")
# Convert predictions to numeric
logistic_predictions <- as.numeric(as.character(logistic_predictions))
# Convert to binary 0 and 1 of predictions
logistic_predictions <- ifelse(logistic_predictions > 0.5, 1, 0)
## Accuracy of Model
logistic_accuracy <- mean(logistic_predictions == test_data$target)
cat("Logistic Regression Accuracy:", logistic_accuracy, "\n")
confusion_matrix <- confusionMatrix(factor(logistic_predictions), factor(test_data$target))
# Print confusion matrix
print(confusion_matrix)
## K-value calculation
sqrt(nrow(train_data))
knn_model <- knn(train = train_data[, -ncol(train_data)], test = test_data[, -ncol(test_data)], cl = train_data$target, k = 15)
# Model accurary
knn_accuracy <- mean(knn_model == test_data$target)
cat("KNN Accuracy:", knn_accuracy, "\n")
confusion_matrix <- confusionMatrix(factor(knn_model), factor(test_data$target))
confusion_matrix
# Training model
random_forest_model <- randomForest(target ~.,  data = train_data)
rf_predictions <- predict(random_forest_model, newdata = test_data)
# Evaluate model
rf_accuracy <- mean(rf_predictions == test_data$target)
cat("Random Forest Accuracy:", rf_accuracy, "\n")
# Confusion Matrix
confusion_matrix <- confusionMatrix(rf_predictions, test_data$target)
confusion_matrix
library(tidyverse)
library(randomForest)
library(class)
library(dplyr)
library(ggplot2)
library(GGally)
library(corrplot)
library(caTools)
library(caret)
library(ggcorrplot)
setwd('/Users/sandip/Documents/Github/Heart-Disease-Prediction-R/')
heart_df <- read.csv("heart.csv")
head(heart_df)
glimpse(heart_df)
is.null(heart_df)
is_duplicate <- duplicated(heart_df)
is_duplicate
sum(is_duplicate)
# which_row_duplicate <- which(duplicated(heart_df))
# which_row_duplicate
df <- heart_df[!is_duplicate, ]
# df
glimpse(df)
# Sex column
df$sex <- as.factor(df$sex)
# cp
df$cp <- as.factor(df$cp)
#fbs
df$fbs <- as.factor(df$fbs)
#restecg
df$restecg <- as.factor(df$restecg)
#exang
df$exang <- as.factor(df$exang)
#slope
df$slope <- as.factor(df$slope)
#ca
df$ca <- as.factor(df$ca)
#thal
df$thal <- as.factor(df$thal)
#target
df$target <- as.factor(df$target)
glimpse(df)
summary(df)
dist_target_column <- table(df$target)
dist_target_column
ggplot(df, aes(x = factor(target))) +
geom_bar() +
labs(title = "Distribution of Target Variable",
x = "Target Column",
y = "Count")
ggplot(df, mapping = aes(x = age, fill = target)) +
geom_histogram() +
facet_wrap(vars(target)) +
labs(title = "Age vs Target", x = "Age", y = "Count", fill = "Target")
ggplot(df, mapping = aes(x=target, fill = cp)) +
geom_bar(position = "dodge") +
labs(title = "cp vs target", x = "Target", y = "Count", fill = "cp type")
ggplot(df, mapping = aes(x = sex, fill = target)) +
geom_bar(position = "fill") +
labs(x = "Sex", y = "Proportion", fill = "Target", title = 'Sex vs Target') +
theme(axis.text.x = element_text(size = 12), axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12), axis.text.y = element_text(size = 12))
# 0 low | 1 high
ggplot(df, mapping = aes(x = fbs, fill = target)) +
geom_bar(position = "fill") +
labs(x = "Fasting blood sugar", y = "Proportion", fill = "Target") +
theme(axis.text.x = element_text(size = 12), axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12), axis.text.y = element_text(size = 12))
# 1 = yes, 0 = no
ggplot(df, mapping = aes(x = exang, fill = target)) +
geom_bar(position = "fill") +
labs(x = "Exercise Induced Angina", y = "Proportion", fill = "Target") +
theme(axis.text.x = element_text(size = 12), axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12), axis.text.y = element_text(size = 12))
ggplot(df, mapping = aes(x = slope, fill = target)) +
geom_bar(position = "fill") +
labs(x = "slope of peak exercise(ST)", y = "Proportion", fill = "Target") +
theme(axis.text.x = element_text(size = 12), axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12), axis.text.y = element_text(size = 12))
ggplot(df, mapping = aes(x = thal, fill = target)) +
geom_bar(position = "fill") +
labs(x = "Thalium Stress Test Result", y = "Proportion", fill = "Target") +
theme(axis.text.x = element_text(size = 12), axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12), axis.text.y = element_text(size = 12))
ggplot(df, mapping = aes(x = target, fill = ca)) +
geom_bar(position = "fill") +
labs(x = "Target", y = "Proportion", fill = "Number of Major Vessels") +
theme(axis.text.x = element_text(size = 12), axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12), axis.text.y = element_text(size = 12))
# Only numeric value correlation
ggcorr(df, label = TRUE,label_size = 3, hjust = 1)
# Convert factor variables back to numeric representation
# df$sex <- as.numeric(df$sex)
# df$cp <- as.numeric(df$cp)
# df$fbs <- as.numeric(df$fbs)
# df$restecg <- as.numeric(df$restecg)
# df$exang <- as.numeric(df$exang)
# df$slope <- as.numeric(df$slope)
# df$ca <- as.numeric(df$ca)
# df$thal <- as.numeric(df$thal)
# df$target <- as.numeric(df$target)
#
#
# cor_matrix <- cor(df, use="complete.obs")
# corrplot(cor_matrix, method="color")
set.seed(100) # random number
train_index<-sample(nrow(df),0.70*nrow(df))
train_data <- df[train_index, ]
test_data <- df[-train_index, ]
# Train logistic regression model
logistic_model <- glm(target ~ ., data = train_data, family = "binomial")
summary(logistic_model)
# Evaluate models
logistic_predictions <- predict(logistic_model, newdata = test_data, type = "response")
# Convert predictions to numeric
logistic_predictions <- as.numeric(as.character(logistic_predictions))
# Convert to binary 0 and 1 of predictions
logistic_predictions <- ifelse(logistic_predictions > 0.5, 1, 0)
## Accuracy of Model
logistic_accuracy <- mean(logistic_predictions == test_data$target)
cat("Logistic Regression Accuracy:", logistic_accuracy, "\n")
confusion_matrix <- confusionMatrix(factor(logistic_predictions), factor(test_data$target))
# Print confusion matrix
print(confusion_matrix)
## K-value calculation
sqrt(nrow(train_data))
knn_model <- knn(train = train_data[, -ncol(train_data)], test = test_data[, -ncol(test_data)], cl = train_data$target, k = 15)
# Model accurary
knn_accuracy <- mean(knn_model == test_data$target)
cat("KNN Accuracy:", knn_accuracy, "\n")
confusion_matrix <- confusionMatrix(factor(knn_model), factor(test_data$target))
confusion_matrix
# Training model
random_forest_model <- randomForest(target ~.,  data = train_data)
rf_predictions <- predict(random_forest_model, newdata = test_data)
rf_accuracy <- mean(rf_predictions == test_data$target)
cat("Random Forest Accuracy:", rf_accuracy, "\n")
# Confusion Matrix
confusion_matrix <- confusionMatrix(rf_predictions, test_data$target)
confusion_matrix
library(tidyverse)
library(randomForest)
library(class)
library(dplyr)
library(ggplot2)
library(GGally)
library(corrplot)
library(caTools)
library(caret)
library(ggcorrplot)
setwd('/Users/sandip/Documents/Github/Heart-Disease-Prediction-R/')
data <- read.csv("heart.csv")
# Display the first few rows of the dataset
head(data)
# Use glimpse() to display a concise summary of the dataset
glimpse(data)
# Check if there are any NULL values in the dataset
is.null(data)
# Check for duplicate rows in the dataset
is_duplicate <- duplicated(data)
is_duplicate
# Count the number of duplicate rows
sum(is_duplicate)
# Identify which rows are duplicates
which_row_duplicate <- which(duplicated(data))
which_row_duplicate
# Create a new dataframe without duplicate rows
df <- data[!is_duplicate, ]
# Display a concise summary of the new dataframe
glimpse(df)
# Convert numerical columns to factor (categorical) columns
df$sex <- as.factor(df$sex)
df$cp <- as.factor(df$cp)
df$fbs <- as.factor(df$fbs)
df$restecg <- as.factor(df$restecg)
df$exang <- as.factor(df$exang)
df$slope <- as.factor(df$slope)
df$ca <- as.factor(df$ca)
df$thal <- as.factor(df$thal)
df$target <- as.factor(df$target)
glimpse(df)
# Display summary statistics of the new dataframe
summary(df)
dist_target_column <- table(df$target)
dist_target_column
ggplot(df, aes(x = factor(target))) +
geom_bar() +
labs(title = "Distribution of Target Variable",
x = "Target Column",
y = "Count")
# Visualize Age vs Target column
ggplot(df, aes(x = age, fill = target)) +
geom_histogram() +
facet_wrap(vars(target)) +
labs(title = "Age vs Target", x = "Age", y = "Count", fill = "Target")
# Visualize CP vs Target
ggplot(df, aes(x = target, fill = cp)) +
geom_bar(position = "dodge") +
labs(title = "CP vs Target", x = "Target", y = "Count", fill = "CP type")
ggplot(df, aes(x = sex, fill = target)) +
geom_bar(position = "fill") +
labs(x = "Sex", y = "Proportion", fill = "Target", title = "Sex vs Target") +
theme(axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.y = element_text(size = 12))
ggplot(df, aes(x = fbs, fill = target)) +
geom_bar(position = "fill") +
labs(x = "Fasting blood sugar", y = "Proportion", fill = "Target") +
theme(axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.y = element_text(size = 12))
ggplot(df, aes(x = exang, fill = target)) +
geom_bar(position = "fill", aes(group = target)) +
labs(x = "Exercise Induced Angina", y = "Proportion", fill = "Target") +
theme(axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.y = element_text(size = 12))
ggplot(df, aes(x = slope, fill = target)) +
geom_bar(position = "fill", aes(group = target)) +
labs(x = "Slope of Peak Exercise (ST)", y = "Proportion", fill = "Target") +
theme(axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.y = element_text(size = 12))
gplot(df, aes(x = thal, fill = target)) +
geom_bar(position = "fill", aes(group = target)) +
labs(x = "Thalium Stress Test Result", y = "Proportion", fill = "Target") +
theme(axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.y = element_text(size = 12))
ggplot(df, aes(x = thal, fill = target)) +
geom_bar(position = "fill", aes(group = target)) +
labs(x = "Thalium Stress Test Result", y = "Proportion", fill = "Target") +
theme(axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.y = element_text(size = 12))
ggplot(df, aes(x = target, fill = ca)) +
geom_bar(position = "fill", aes(group = ca)) +
labs(x = "Target", y = "Proportion", fill = "Number of Major Vessels") +
theme(axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.y = element_text(size = 12))
# Calculate the correlation matrix
correlation_matrix <- cor(df[sapply(df, is.numeric)])
# Visualize the correlation matrix using corrplot
corrplot::corrplot(correlation_matrix, method = "circle", type = "upper", tl.cex = 0.7)
# df$sex <- as.numeric(df$sex)
# df$cp <- as.numeric(df$cp)
# df$fbs <- as.numeric(df$fbs)
# df$restecg <- as.numeric(df$restecg)
# df$exang <- as.numeric(df$exang)
# df$slope <- as.numeric(df$slope)
# df$ca <- as.numeric(df$ca)
# df$thal <- as.numeric(df$thal)
# df$target <- as.numeric(df$target)
df$sex <- as.numeric(df$sex)
df$cp <- as.numeric(df$cp)
df$fbs <- as.numeric(df$fbs)
df$restecg <- as.numeric(df$restecg)
df$exang <- as.numeric(df$exang)
df$slope <- as.numeric(df$slope)
df$ca <- as.numeric(df$ca)
df$thal <- as.numeric(df$thal)
df$target <- as.numeric(df$target)
head(df)
df$target <- as.numeric(df$target, 0, 1)
head(df)
df$sex <- as.numeric(df$sex)
df$cp <- as.numeric(df$cp)
df$fbs <- as.numeric(df$fbs)
df$restecg <- as.numeric(df$restecg)
df$exang <- as.numeric(df$exang)
df$slope <- as.numeric(df$slope)
df$ca <- as.numeric(df$ca)
df$thal <- as.numeric(df$thal)
df$target <- as.numeric(as.character(df$target))
df$target
df$target <- as.numeric(df$target) -1
df$target
# Calculate the correlation matrix
correlation_matrix <- cor(df[sapply(df, is.numeric)])
# Visualize the correlation matrix using corrplot
corrplot::corrplot(correlation_matrix, method = "circle", type = "upper", tl.cex = 0.7)
cor_matrix <- cor(df, use="complete.obs")
corrplot(cor_matrix, method="color")
ggcorr(df, label = TRUE,label_size = 3, hjust = 1)
set.seed(123)  # for reproducibility
train_index <- createDataPartition(df$target, p = 0.7, list = FALSE)
train_data <- df[train_index, ]
test_data <- df[-train_index, ]
# Train logistic regression model
logistic_model <- glm(target ~ ., data = train_data, family = binomial)
# Train random forest model
random_forest_model <- randomForest(target ~ ., data = train_data)
# Evaluate models
logistic_predictions <- predict(logistic_model, newdata = test_data, type = "response")
rf_predictions <- predict(random_forest_model, newdata = test_data)
# Convert predictions to numeric
logistic_predictions <- as.numeric(as.character(logistic_predictions))
rf_predictions <- as.numeric(as.character(rf_predictions))
# Convert predictions to binary (0/1)
logistic_predictions <- ifelse(logistic_predictions > 0.5, 1, 0)
rf_predictions <- ifelse(rf_predictions > 0.5, 1, 0)
# Evaluate logistic regression model
logistic_accuracy <- mean(logistic_predictions == test_data$target)
cat("Logistic Regression Accuracy:", logistic_accuracy, "\n")
# Check for missing values in the test data
sum(is.na(test_data))
# Check factor levels in target variable
table(train_data$target)
table(test_data$target)
# If everything seems correct, try retraining the model and evaluating again
random_forest_model <- randomForest(target ~ ., data = train_data)
rf_predictions <- predict(random_forest_model, newdata = test_data)
# Evaluate random forest model
rf_accuracy <- mean(rf_predictions == test_data$target, na.rm = TRUE)
cat("Random Forest Accuracy:", rf_accuracy, "\n")
